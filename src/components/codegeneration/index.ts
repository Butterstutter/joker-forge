import { JokerData } from "../JokerCard";
import JSZip from "jszip";
import { addAtlasToZip } from "./ImageProcessor";
import {
  generateJokerBaseCode,
  generateBasicLocVarsFunction,
  generateBasicCalculateFunction,
  shouldUseSpecializedHandler,
} from "./JokerBase";
import {
  generatePokerHandCode,
  generatePokerHandDescription,
} from "./effects/PokerHandEffects";

export const exportJokersAsMod = async (
  jokers: JokerData[],
  modName: string,
  authorName: string
): Promise<boolean> => {
  try {
    const zip = new JSZip();
    const modId = modName.toLowerCase().replace(/\s+/g, "");

    zip.file("main.lua", generateMainLua(jokers));
    zip.file(`${modId}.json`, generateModJson(modName, modId, authorName));
    zip.file("config.lua", "return {}");

    await addAtlasToZip(zip, jokers);

    const content = await zip.generateAsync({ type: "blob" });
    const url = URL.createObjectURL(content);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${modId}.zip`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    return true;
  } catch (error) {
    console.error("Failed to generate mod:", error);
    return false;
  }
};

const generateMainLua = (jokers: JokerData[]): string => {
  let output = `local mod = SMODS.current_mod
-- FILE GENERATED BY JOKER FORGE

mod.config = {}

-- Create custom joker atlas
SMODS.Atlas({
    key = "CustomJokers", 
    path = "CustomJokers.png", 
    px = 71,
    py = 95, 
    atlas_table = "ASSET_ATLAS"
}):register()

`;

  jokers.forEach((joker, index) => {
    output += generateJokerCode(joker, index, "CustomJokers") + "\n\n";
  });

  output += "return mod";
  return output;
};

const generateJokerCode = (
  joker: JokerData,
  index: number,
  atlasKey: string
): string => {
  // Start with the base joker code
  let jokerCode = generateJokerBaseCode(joker, index, atlasKey);
  let locVarsCode = "";
  let calculateCode = "";

  if (joker.rules && joker.rules.length > 0) {
    // Check for poker hand rules
    const pokerHandRules = joker.rules.filter(
      (rule) => rule.trigger === "poker_hand_played"
    );

    if (pokerHandRules.length > 0) {
      // Generate specialized code for poker hand rules
      locVarsCode = generateBasicLocVarsFunction(joker);
      calculateCode = generatePokerHandCode(joker, joker.rules);
    } else {
      // Standard code for other rules or no rules
      locVarsCode = generateBasicLocVarsFunction(joker);
      calculateCode = generateBasicCalculateFunction(joker);
    }
  } else {
    // No rules
    locVarsCode = generateBasicLocVarsFunction(joker);
    calculateCode = generateBasicCalculateFunction(joker);
  }

  // Add the generated code to the joker
  jokerCode += `,

    ${locVarsCode},

    ${calculateCode}
}`;

  return jokerCode;
};

const generateModJson = (
  modName: string,
  modId: string,
  authorName: string
): string => {
  const metadata = {
    id: modId,
    name: modName,
    display_name: modName,
    author: [authorName],
    description: "Custom jokers created with Joker Forge",
    prefix: modId,
    main_file: "main.lua",
    priority: 1,
    version: "1.0.0",
    dependencies: ["Steamodded (>=1.0.0~BETA-0404a)"],
  };

  return JSON.stringify(metadata, null, 2);
};
